#
# (c) 2017 ReconfigureIO
#
# <COPYRIGHT TERMS>
#

#
# Vivado TCL batch script which attempts to build an SDAccel kernel from a block
# of generated action code. The script takes an arbitrary number of command line
# arguments:
#
# -kernel_id <kernel_id>
#   This is the kernel identifier which is used to identify the toplevel module
#   when wrapping the RTL as a SDAccel kernel object. It should be a valid
#   Verilog module name which is unique to a specific SDAccel kernel function.
#   If not specified, the kernel identifier will be automatically generated by
#   concatenating the Xilinx VLNV IP core identifiers.
# -vendor <vendor_name>
#   This is the vendor name which is to be used as the 'vendor' field of the
#   Xilinx VLNV IP core identifier, and will typically be the fully qualified
#   domain name associated with the vendor (eg, 'reconfigure.io'). This option
#   is mandatory.
# -library <library_name>
#   This is the vendor library name associated with the 'library' field of the
#   Xilinx VLNV IP core identifier, and will typically be a dot separated
#   hierarchical path (eg, sdaccel.golang.libname). This option is mandatory.
# -name <module_name>
#   The specified name will be used as the 'name' field of the Xilinx VLNV IP
#   core identifier. This option is mandatory.
# -version <version_number>
#   This is the version number which is included in the Xilinx VLNV IP core
#   identifier. It should be a dot separated version number that consists of a
#   major and minor version number (eg, 2.42). This option is mandatory.
# -action_source_file <source_file>
#   This is a path to the generated action code source, which should be a single
#   Verilog file containing all the modules required. This option is mandatory.
# -include_source_dir <wrapper_dir>
#   This is a path to an imported Verilog source code directory, which contains
#   Verilog source code files to be included in the build. This option may be
#   used multiple times to specify multiple source directories. By default,
#   the 'verilog' subdirectory will always be included.
# -build_dir <build_dir>
#   This is a path to the netlist build directory, into which the output netlist
#   will be placed. If not specified, the current directory will be used.
# -param_args_file <args_file>
#   This specifies the parameter arguments definition file, which consists of
#   an arbitrary list of kernel arguments of the form <arg name="foo" ...../>
#   If not specified, the file 'param_args.xmldef' in the current working
#   directory will be used instead. If no suitable parameter arguments file
#   can be found, the kernel arguments section of the kernel.xml file will
#   not be populated.
# -skip_resynthesis [0|1]
#   This is a boolean flag which can be used to skip the synthesis phase of the
#   build process if a valid Verilog netlist is already present in the build
#   directory. This option is not mandatory and has the default value of 0.
# -do_relative_placement [0|1]
#   This is a boolean flag which can be used to enable the generation of
#   relative placement macros for Verilog primitives. This option is not
#   mandatory and has the default value of 0.
# -part <part_name>
#   The part to synthesize for. If not provided, defaults to
#   "xcku115-flvf1924-1-c"
# -part_family <part_family>
#   The part family to synthesize for. If not provided, defaults to
#   "kintexu"
# -axi_data_width <data_bus_width>
#   The width of the external AXI data bus to be used for memory access. If
#   not provided, defaults to 128.
#
# The build script can be run from the command line using the Vivado batch mode
# as follows, where <tcl_script_args> is replaced by the arguments specified
# above.
#
# > vivado -mode batch -source <this_script_name> -tclargs <tcl_script_args>
#

# Specify degree of multithreading.
set numProcessors [exec nproc]
if {$numProcessors > 8} {
    set numProcessors 8
}

if {0 == [info exists numProcessors]} {
  set_param general.maxThreads 4
} else {
  set_param general.maxThreads [expr $numProcessors]
}
set maxSynthesisThreads [get_param general.maxThreads]
puts "Using $maxSynthesisThreads CPU thread(s) for Vivado synthesis"

# Configure synthesis message handling.
set_msg_config -id "Synth 8-3333" -suppress
set_msg_config -id "Synth 8-3352" -new_severity error

# Include synthesis and packaging functions.
source [file join [file dirname [info script]] sda_kernel_synthesis.tcl]
source [file join [file dirname [info script]] sda_kernel_constrain.tcl]
source [file join [file dirname [info script]] sda_kernel_report.tcl]
source [file join [file dirname [info script]] sda_kernel_packaging.tcl]
source [file join [file dirname [info script]] sda_kernel_xilinx_utils.tcl]

# Specify default parameter values.
set importCodePath [list "verilog"]
set skipResynthesis 0
set doRelativePlacement 0
set paramArgsFileName "param_args.xmldef"

# Selects a generic Kintex Ultrascale part as the nominal target.
set partName "xcku115-flvf1924-1-c"
set partFamily "kintexu"
set axiDataWidth 512

#
# Extract the TCL command line arguments.
#
set argIndex 0
while {$argIndex < $argc} {
  set arg [lindex $argv $argIndex]
  incr argIndex
  switch $arg {
    "-kernel_id" {
      set moduleName [lindex $argv $argIndex]
      incr argIndex
    }
    "-vendor" {
      set vendorName [lindex $argv $argIndex]
      incr argIndex
    }
    "-library" {
      set libraryName [lindex $argv $argIndex]
      incr argIndex
    }
    "-name" {
      set kernelName [lindex $argv $argIndex]
      incr argIndex
    }
    "-version" {
      set versionNumber [lindex $argv $argIndex]
      incr argIndex
    }
    "-build_dir" {
      set buildDirPath [lindex $argv $argIndex]
      incr argIndex
    }
    "-action_source_file" {
      set sourceFileName [lindex $argv $argIndex]
      incr argIndex
    }
    "-include_source_dir" {
      set importCodePath [lappend $importCodePath [lindex $argv $argIndex]]
      incr argIndex
    }
    "-param_args_file" {
      set paramArgsFileName [lindex $argv $argIndex]
      incr argIndex
    }
    "-skip_resynthesis" {
      set skipResynthesis [lindex $argv $argIndex]
      incr argIndex
    }
    "-do_relative_placement" {
      set doRelativePlacement [lindex $argv $argIndex]
      incr argIndex
    }
    "-part" {
      set partName [lindex $argv $argIndex]
      incr argIndex
    }
    "-part_family" {
      set partFamily [lindex $argv $argIndex]
      incr argIndex
    }
    "-axi_data_width" {
      set axiDataWidth [lindex $argv $argIndex]
      incr argIndex
    }
    default {
      puts "Invalid TCL batch script argument : $arg"
      exit -1
    }
  }
}

#
# Check for valid VLNV settings.
# TODO: Currently assumes valid format if present.
#
if {0 == [info exists vendorName]} {
  puts "Missing VLNV -vendor argument"
  exit -1
}
if {0 == [info exists libraryName]} {
  puts "Missing VLNV -library argument"
  exit -1
}
if {0 == [info exists kernelName]} {
  puts "Missing VLNV -name argument"
  exit -1
}
if {0 == [info exists versionNumber]} {
  puts "Missing VLNV -version argument"
  exit -1
}

#
# Check for valid AXI data bus width.
#
if {64 != $axiDataWidth && 128 != $axiDataWidth && \
  256 != $axiDataWidth && 512 != $axiDataWidth} {
  puts "Invalid AXI data width : $axiDataWidth"
  exit -1
}

#
# Change to the specified build directory if required, with fully qualified
# directory path.
#
if {0 != [info exists buildDirPath]} {
  file mkdir $buildDirPath
  if {[catch {cd $buildDirPath} errMsg]} {
    puts $errMsg
    puts "Invalid TCL batch script build directory : $buildDirPath"
    exit -1
  }
}
set buildDirPath [pwd]
set synDirPath [file join $buildDirPath syn]
set ipDirPath [file join $buildDirPath ip]
set reportDirPath [file join $buildDirPath reports]

#
# Construct the unique module name if not specified.
#
if {0 == [info exists moduleName]} {
  set moduleName [string map {. _ - _} \
    ${vendorName}_${libraryName}_${kernelName}_${versionNumber}]
}

#
# Run the synthesis phase if required. This will produce a single Verilog file
# in the build directory which contains all the HDL components of the SDAccel
# kernel.
#
file mkdir $synDirPath
set synFileName [file join $synDirPath "${moduleName}.v"]
set constraintFileName [file join $synDirPath "${moduleName}.xdc"]
if {0 == $skipResynthesis || 0 == [file exists $synFileName]} {
  cd $synDirPath
  sda_kernel_synthesis $sourceFileName $moduleName $importCodePath \
    $partName $axiDataWidth
  sda_kernel_report $moduleName $partName $reportDirPath
  if {0 != $doRelativePlacement} {
    sda_kernel_constrain $moduleName
  }
  cd $buildDirPath
}

#
# Run the Vivado IP creation phase. This will package the synthesised SDAccel
# kernel code as a standard Vivado IP core.
#
file delete -force $ipDirPath

set verilogDirName [file join $ipDirPath "hdl" "verilog"]
file mkdir $verilogDirName
file copy -force $synFileName $verilogDirName

if {0 != [file exists $constraintFileName]} {
  set constraintDirName [file join $ipDirPath "constraints"]
  file mkdir $constraintDirName
  file copy -force $constraintFileName $constraintDirName
}

#
# Run the standard Xilinx HLS IP packaging flow.
#
cd $ipDirPath
configure_ip_core $moduleName $vendorName $libraryName $kernelName \
  $versionNumber $axiDataWidth $partFamily
cd $buildDirPath

#
# Run the SDAccel packaging phase. This uses the previously generated Vivado IP
# core to create an SDAccel kernel object.
#
sda_kernel_packaging $moduleName $vendorName $libraryName $kernelName \
  $versionNumber $axiDataWidth $paramArgsFileName $ipDirPath $buildDirPath
