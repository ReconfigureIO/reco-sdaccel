#!/bin/bash

set -e
set -o pipefail

export DIR
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

export ROOT_DIR="$PWD"
reco_optimize="yes"
reco_memory_interface="axi"
reco_memory_width=64
reco_ports=2
reco_arg_width=0
reco_compiler=teak

function parse_yaml {
    local file="$1"
    local lookup_var="$2"
    local default="$3"
    # Parse stdin as yaml, grab key according to first argument from dict
    # and print it; if that key is missing print a default value.
    local prog='
import yaml, sys
filename, key, default = sys.argv[1:]
with open(filename, "rU") as fd: # universal newlines
    parsed = yaml.load(fd)
    print(parsed.get(key, default))
'
    python3 -c "$prog" "$file" "$lookup_var" "$default"
}


if [ -e 'reco.yml' ]; then
    reco_optimize="$(parse_yaml reco.yml optimize "$reco_optimize")"
    reco_memory_interface="$(parse_yaml reco.yml memory_interface "$reco_memory_interface")"
    reco_memory_width="$(parse_yaml reco.yml memory_width "$reco_memory_width")"
    reco_ports="$(parse_yaml reco.yml ports "$reco_ports")"
    reco_arg_width="$(parse_yaml reco.yml arg_width "$reco_arg_width")"
    reco_compiler="$(parse_yaml reco.yml compiler "$reco_compiler")"
fi

RECO_ARGS=(
    OPTIMIZE="$reco_optimize"
    MEMORY_INTERFACE="$reco_memory_interface"
    AXI_DATA_WIDTH="$reco_memory_width"
    PORTS="$reco_ports"
    COMPILER="$reco_compiler"
)

MAKE=(
    make
    --environment-overrides
    --file "$DIR/sdaccel-builder.mk"
    "${RECO_ARGS[@]}"
)

export PATH="$DIR/smi/bin:$DIR/bin:$PATH"

# Merge timing and utilization reports.
# Exposed as the command report for easier testing without the full xocc flow.
# e.g. sdaccel-builder report
# Primarily will be used by the build & simulate commands
function report {
    "${MAKE[@]}" TARGET=hw_emu report
}

function graph {
    "${MAKE[@]}" TARGET=hw graph
}

function build {
    "${MAKE[@]}" TARGET=hw_emu kernel sim
    # run reports after everything
    report
}

function image {
    "${MAKE[@]}" TARGET=hw kernel
    # run reports after everything
    report
}

function test_go {
    "${MAKE[@]}" verilog
}

function simulate {
    "${MAKE[@]}" TARGET=hw_emu sim cmds kernel
    # run reports after everything
    report
    export PATH="$PWD/.reco-work/sdaccel/dist/":$PATH
    # This is for the emconfig.json
    cd "$PWD/.reco-work/sdaccel/dist/"

    # shellcheck source=/dev/null
    source "$XILINX_SDACCEL"/settings64.sh
    XCL_EMULATION_MODE=hw_emu \
    XCL_BINDIR="$PWD/.reco-work/sdaccel/dist/xclbin" \
        bash -c "$@"
}

function cmds {
    "${MAKE[@]}" cmds
}

function clean {
    "${MAKE[@]}" clean
}

function lint {
    test_go
    TOP=sda_kernel_wrapper_gmem
    EXTRA=()
    if [ "$reco_memory_interface" == "smi" ]
    then
        EXTRA=(
            "-DAXI_MASTER_DATA_WIDTH=$reco_memory_width"
            "-DAXI_MASTER_HAS_WID=1"
        )
    fi
    if [ "$reco_arg_width" -gt 0 ]
    then
        EXTRA+=(
            "-DKERNEL_ARGS_DATA=1"
            "-DKERNEL_ARGUMENT_WIDTH=$reco_arg_width"
        )
    fi

    if [ "$reco_compiler" == "rio" ]
    then
        TOP=sda_kernel_wrapper_rio
        # Include gmem stub
        EXTRA+=("$DIR/go-teak/src/sdaccel/stubs/sda_kernel_action_stub_gmem.v")
    else
        # Include rio stub
        EXTRA+=("$DIR/go-teak/src/sdaccel/stubs/rio_kernel_action_stub.v")
    fi

    verilator \
        -Wall \
        --lint-only \
        -I".reco-work/sdaccel/verilog/includes" \
        .reco-work/sdaccel/verilog/library/* \
        .reco-work/sdaccel/verilog/main.v \
        "${EXTRA[@]}" \
        --top-module "$TOP" \
        --report-unoptflat \
        -Wno-REDEFMACRO \
        -Wno-DECLFILENAME
}

function main {
    case "$1" in
        "build")
            build "${@:2}"
            ;;
        "report")
            report "${@:2}"
            ;;
        "simulate")
            simulate "${@:2}"
            ;;
        "image")
            image "${@:2}"
            ;;
        "graph")
            graph "${@:2}"
            ;;
        "cmds")
            cmds "${@:2}"
            ;;
        "test-go")
            test_go "${@:2}"
            ;;
        "clean")
            clean "${@:2}"
            ;;
        "lint")
            lint "${@:2}"
            ;;
        *)
            echo "unrecognized command: $1";
            exit 1
            ;;
        esac
}

main "$@"
