#!/bin/bash

set -e
set -o pipefail

export DIR
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

export ROOT_DIR="$PWD"
reco_optimize="yes"
reco_memory_interface="axi"
reco_memory_width=64
reco_ports=2

function parse_yaml {
    local file="$1"
    local lookup_var="$2"
    local default="$3"
    # Parse stdin as yaml, grab key according to first argument from dict
    # and print it; if that key is missing print a default value.
    local prog='
import yaml, sys
filename, key, default = sys.argv[1:]
with open(filename, "rU") as fd: # universal newlines
    parsed = yaml.load(fd)
    print(parsed.get(key, default))
'
    python3 -c "$prog" "$file" "$lookup_var" "$default"
}


if [ -e 'reco.yml' ]; then
    reco_optimize="$(parse_yaml reco.yml optimize "$reco_optimize")"
    reco_memory_interface="$(parse_yaml reco.yml memory_interface "$reco_memory_interface")"
    reco_memory_width="$(parse_yaml reco.yml memory_width "$reco_memory_width")"
    reco_ports="$(parse_yaml reco.yml ports "$reco_ports")"
fi

export PATH="$DIR/smi/bin:$DIR/bin:$PATH"

# Merge timing and utilization reports.
# Exposed as the command report for easier testing without the full xocc flow.
# e.g. sdaccel-builder report
# Primarily will be used by the build & simulate commands
function report {
    make -e -f "$DIR/sdaccel-builder.mk" TARGET=hw_emu OPTIMIZE="$reco_optimize" MEMORY_INTERFACE="$reco_memory_interface" AXI_DATA_WIDTH="$reco_memory_width" PORTS="$reco_ports" report

}

function graph {
    make -e -f "$DIR/sdaccel-builder.mk" TARGET=hw OPTIMIZE="$reco_optimize" MEMORY_INTERFACE="$reco_memory_interface" AXI_DATA_WIDTH="$reco_memory_width" PORTS="$reco_ports" graph
}

function build {
    make -e -f "$DIR/sdaccel-builder.mk" TARGET=hw_emu OPTIMIZE="$reco_optimize" MEMORY_INTERFACE="$reco_memory_interface" AXI_DATA_WIDTH="$reco_memory_width" PORTS="$reco_ports" kernel sim
    # run reports after everything
    report
}

function image {
    make -e -f "$DIR/sdaccel-builder.mk" TARGET=hw OPTIMIZE="$reco_optimize" MEMORY_INTERFACE="$reco_memory_interface" AXI_DATA_WIDTH="$reco_memory_width" PORTS="$reco_ports" kernel
    # run reports after everything
    report
}

function test_go {
    make -e -f "$DIR/sdaccel-builder.mk" OPTIMIZE="$reco_optimize" MEMORY_INTERFACE="$reco_memory_interface" AXI_DATA_WIDTH="$reco_memory_width" PORTS="$reco_ports" verilog
}

function simulate {
    make -e -f "$DIR/sdaccel-builder.mk" TARGET=hw_emu OPTIMIZE="$reco_optimize" MEMORY_INTERFACE="$reco_memory_interface" AXI_DATA_WIDTH="$reco_memory_width" PORTS="$reco_ports" sim cmds kernel
    # run reports after everything
    report
    export PATH="$PWD/.reco-work/sdaccel/dist/":$PATH
    # This is for the emconfig.json
    cd "$PWD/.reco-work/sdaccel/dist/"

    # shellcheck source=/dev/null
    source "$XILINX_SDACCEL"/settings64.sh
    XCL_EMULATION_MODE=hw_emu XCL_BINDIR="$PWD/.reco-work/sdaccel/dist/xclbin" bash -c "$@"
}

function cmds {
    make -e -f "$DIR/sdaccel-builder.mk" cmds
}

function clean {
    make -e -f "$DIR/sdaccel-builder.mk" clean
}

function lint {
    test_go
    EXTRA=()
    if [ "$reco_memory_interface" == "smi" ]
    then
        EXTRA=("-DAXI_MASTER_DATA_WIDTH=$reco_memory_width" "-DAXI_MASTER_HAS_WID=1")
    fi

    verilator -Wall --lint-only -I".reco-work/sdaccel/verilog/includes" -I".reco-work/sdaccel/verilog/library" .reco-work/sdaccel/verilog/main.v "${EXTRA[@]}" --top-module sda_kernel_wrapper_gmem --report-unoptflat -Wno-UNUSED -Wno-UNDRIVEN -Wno-REDEFMACRO -Wno-DECLFILENAME
}

function main {
    case "$1" in
        "build")
            build "${@:2}"
            ;;
        "report")
            report "${@:2}"
            ;;
        "simulate")
            simulate "${@:2}"
            ;;
        "image")
            image "${@:2}"
            ;;
        "graph")
            graph "${@:2}"
            ;;
        "cmds")
            cmds "${@:2}"
            ;;
        "test-go")
            test_go "${@:2}"
            ;;
        "clean")
            clean "${@:2}"
            ;;
        "lint")
            lint "${@:2}"
            ;;
        *)
            echo "unrecognized command: $1";
            exit 1
            ;;
        esac
}

main "$@"
